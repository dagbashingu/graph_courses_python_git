# Imports


```{python}
import pandas as pd
import numpy as np
import vega_datasets as vd
```

# Basics of a function


```{python}
def pounds_to_kg (pounds):
    return pounds * 0.4536
```


```{python}
pounds_to_kg(150)
```


```{python}
pounds_to_kg(pounds = 150)
```
```{python}
def pds_to_kg (pounds):
    kg = pounds * 0.4536
    return kg
```

```{python}
pds_to_kg(150)
```
using inside a DataFrame


```{python}
pounds_df = pd.DataFrame({"pounds": [150,200,250]})
pounds_df
```


```{python}
pounds_df["kg"] = pds_to_kg(pounds_df["pounds"])
pounds_df
```

# Practice Q: Years to Months


```{python}
def years_to_months (years):
    months = years * 12
    return months
```


```{python}
riots_df = vd.data.la_riots()
riots_df
```

```{python}
riots_df ["age_months"] = years_to_months(riots_df["age"])
riots_df
```

# Functions with multiple arguments


```{python}
def calc_calories(carb_grams, protein_grams, fats_grams):
    calories = (carb_grams * 4) + (protein_grams * 4) + (fats_grams * 9)
    return calories
```

```{python}
calc_calories (carb_grams = 50, protein_grams = 25, fats_grams = 15)
```

```{python}
# Does not work due to missing rgument
calc_calories (carb_grams = 50, protein_grams = 25)
```

# Default arguments

```{python}
def calc_calories2(carb_grams=0, protein_grams=0, fats_grams=0):
    calories = (carb_grams * 4) + (protein_grams * 4) + (fats_grams * 9)
    return calories
```

```{python}
calc_calories2 (carb_grams = 50, protein_grams = 25)
```


```{python}
food_df = pd.DataFrame({"food": ["Apple", "Avocado"], "carb": [25,10], "protein": [0,1], "fat": [0,14]})
food_df
```


```{python}
food_df ["calories"] = calc_calories2 (food_df["carb"], food_df["protein"], food_df["fat"])
food_df
```

# Practice Q: BMI Function


```{python}
def calc_bmi (weight, height):
    bmi = (weight/height)
    return bmi
```


```{python}
bmi_df = pd.DataFrame(
    {"weight": [70, 80, 100], # in kg
    "height": [1.7,1.8,1.2]} # in meters
    ) 
bmi_df
```

```{python}
bmi_df["BMI"] = calc_bmi (bmi_df["weight"], bmi_df ["height"]).round(1)
bmi_df
```

# Intro to conditionals: if, elif, else

```{python}
def class_num (num):
    if num > 0:
        return "Positive"
    elif num < 0:
        return "Negative"
    elif num == 0:
        return "Zero"
    else:
        return "Invalid"

print (class_num (5))
print (class_num (-5))
print (class_num (0))
print (class_num (np.nan))
```

```{python}
num_df = pd.DataFrame({"num": [10,-5,0]})
num_df
```

```{python}
# this does not work
class_num(num_df["num"])
```

```{python}
class_num_vec = np.vectorize(class_num)
```

```{python}
num_df ["category"] = class_num_vec(num_df["num"])
num_df
```

# Grading system:

```{python}
def categorize_grade (grade):
    if grade >= 85:
        return "Excellent"
    elif grade >= 60 and grade <85:
        return "Pass"
    elif grade >=0 and grade < 60:
        return "Fail"
    else:
        return "Invalid Grade"
categorize_grade (-5)
```

```{python}
categorize_grade_vec = np.vectorize (categorize_grade)
```

```{python}
categorize_grade_vec ([70,80,100])
```

# Practice Q: Age categorization

```{python}
def categorize_age (age):
    if age < 18:
        return "Minor"
    elif age >=18 and age < 65:
        return "Adult"
    elif age >= 65:
        return "Senior"
    else:
        return "Invalid age"
```

```{python}
categorize_age_vec = np.vectorize(categorize_age)
```

```{python}
riots_df ["Age_Category"] = categorize_age_vec (riots_df["age"])
riots_df [["age","Age_Category"]]
riots_df["Age_Category"].value_counts()
riots_df
```

# Research on the following
apply()
np.select()
np.where
np.cut
