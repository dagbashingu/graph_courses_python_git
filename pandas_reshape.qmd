## Packages
```{python}
import pandas as pd
import plotly.express as px
```

## Data

```{python}
# Temperatures dataset
temperatures = pd.DataFrame(
    {
        "country": ["Sweden", "Denmark", "Norway"],
        "1994": [1, 2, 3],
        "1995": [3, 4, 5],
        "1996": [5, 6, 7],
    }
)

# Fuels Wide dataset
fuels_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_per_capita_wide.csv"
)

# Eurostat Births Wide dataset
euro_births_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/euro_births_wide.csv"
)

# Contracts dataset
contracts = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/chicago_contracts_20_23.csv"
)

# Population dataset
population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
```

## What do Wide and Long mean

# When to use wide vs long data
Wide: Displaying information
Long: Analysis or Plotting

# From wide to long with melt()

```{python}
fuels_wide
```

```{python}
fuels_wide.melt(id_vars=["Entity","Code"]).sort_values(["Entity","variable"])
```

```{python}
fuels_long = fuels_wide.melt(
    id_vars=["Entity", "Code"], var_name="year", value_name="oil_consumption"
).sort_values(["Entity", "year"])
```


```{python}
# stripping the year off the "y_"

fuels_long["year"] = fuels_long["year"].str.replace("y_", "").astype(int)
fuels_long
```

## Practice Q: Temperatures to Long


```{python}
temperatures
```

```{python}
temperatures_long = temperatures.melt(id_vars=["country"], var_name="year",value_name="avg_temp").sort_values(["country","year"])
```

## Practice Q: Eurostat Births to Long


```{python}
euro_births_wide
```

```{python}
euro_births_long = euro_births_wide.melt(
    id_vars=["country"], var_name="year", value_name="births_count"
).sort_values(["country", "year"])
```


```{python}
# removing the x prefix from the year vales

euro_births_long["year"] = euro_births_long["year"].str.replace("x", "").astype(int)
euro_births_long
```

## Using long data for analysis

Long data is easier to generate statistics summaries
```{python}
fuels_long.groupby("Entity")["oil_consumption"].mean()
```

# Long data easier to plot
```{python}
subset = fuels_long.query("Entity in ['Peru','Iran','China']")
subset
```

```{python}
px.line(subset, x="year", y="oil_consumption", color="Entity")
```

## From Long to Wide with the Pivot method


```{python}
contracts
```

```{python}
contracts_summary = contracts.groupby("state")["year"].value_counts().reset_index()

contracts_summary
```


```{python}
contracts_summary.pivot(columns="year", index="state", values="count").reset_index()
```

```{python}
contracts_summary.pivot(columns="state", index="year", values="count").reset_index()
```

## Practice Q: Temperaatures back to Wide

```{python}
temperatures_long
```

```{python}
temperatures_wide = temperatures_long.pivot(columns="year", index="country", values="avg_temp").reset_index()

temperatures_wide
```

# Practice Q: Population to Wide

```{python}
population
```

```{python}
population_wide = population.pivot(
    columns="year", index="country", values="population"
).reset_index()
population_wide
```
