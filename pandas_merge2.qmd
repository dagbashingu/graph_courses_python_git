## Packages

```{python}
import pandas as pd
import country_converter as cc
```

## Data

```{python}
# Load datasets
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)


oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```

## One to many join

```{python}
people
```

```{python}
test_info_many
```

```{python}
pd.merge(people, test_info_many)
```

## Practice Q: Merging one to many crop yields


```{python}
farm_info
```


```{python}
crop_yields
```


```{python}
pd.merge(farm_info,crop_yields)
```
Five rows are prented

## Multiple key colums 


```{python}
traffic_flow
```


```{python}
pollution_levels
```


```{python}
# Incorrect
pd.merge(traffic_flow,pollution_levels, on="street_name")
```


```{python}
# Correct
pd.merge(traffic_flow,pollution_levels, on=["street_name","time_of_day"])
```

## Practice Q: Calculate oil consumption per capita


```{python}
oil_consumption.sort_values(by=["country","year"])
```


```{python}
tidyr_population.sort_values(by=["country","year"])
```


```{python}
oil_con_cap = pd.merge(
    tidyr_population, oil_consumption, how="left", on=["country", "year"]
)
oil_con_cap.sample(10)
```

```{python}
# Oil consuption per capita
oil_con_cap["oil_con_per_cap"] = (oil_con_cap["oil_consump"] / oil_con_cap["population"]).round(2)
oil_con_cap.sample(10)
```


```{python}
# Which country has the highest per capita oil consumption in 1995

oil_con_cap.query("year == 1995").sort_values("oil_con_per_cap", ascending=False)
```

Singapore has the highest per capita oil consumption in 1995

## Key mismatches


```{python}
people
```

```{python}
test_info_diff
```

```{python}
pd.merge(people, test_info_diff)
```

```{python}
# make Alica title case
test_info_diff["name"] = test_info_diff["name"].str.title()
```


```{python}
test_info_diff["name"].unique()
```

```{python}
# Remove the trainling space in Charlie

test_info_diff["name"] = test_info_diff["name"].str.strip()
```

```{python}
pd.merge(people, test_info_diff)
```

## Practice Q: inner join countries


```{python}
asia_countries
```

```{python}
asia_population
```

```{python}
pd.merge(asia_countries, asia_population)
```

```{python}
# fixing the descripancies
asia_population["Country"] = asia_population["Country"].str.title()
asia_population
```

```{python}
asia_population["Country"]= asia_population["Country"].replace({"Philipines": "Philippines"})
asia_population
```

```{python}
pd.merge(asia_countries, asia_population)
```

## Key Mismatches: Oil Consumption example

```{python}
oil_consumption
```

```{python}
tidyr_population
```

```{python}
oil_pop = pd.merge(oil_consumption,tidyr_population, how="left", on=["country","year"]).sort_values(["country","year"])

oil_pop
```
# Fixing mismatches in large datasets we use sets


```{python}
oil_countries = set(oil_consumption["country"].unique())
pop_countries = set(tidyr_population["country"].unique())
```

```{python}
oil_countries - pop_countries
```

```{python}
pop_countries - oil_countries
```

## Merging with country code 


```{python}
cc.convert("Nigeria", to="ISO3")
```


```{python}
oil_consumption["country_code"] = cc.convert(oil_consumption["country"], to="ISO3")
tidyr_population["country_code"] = cc.convert(tidyr_population["country"], to="ISO3")
```

```{python}
oil_countries = set(oil_consumption["country_code"].unique())
pop_countries = set(tidyr_population["country_code"].unique())
```


```{python}
oil_countries - pop_countries
```

## Practice Q: Merging oil consumption with geographic data


```{python}
oil_2012
```

```{python}
country_regions
```

```{python}
# Add country code to the oil_2012 dataset
oil_2012["country_code"] = cc.convert(oil_2012["country"], to="ISO3")
```

```{python}
# Merge the two datasets
oil_region = pd.merge(oil_2012, country_regions, how="left", on="country_code")
oil_region
```

```{python}
# Assuming 'oil_region' is the DataFrame name
max_con_cont = (
    oil_region.groupby(["continent", "country"])
    .agg(
        max_consumption=("oil_consump", "max"),
    )
    .reset_index()
    .sort_values("max_consumption", ascending=False)
    .drop_duplicates(subset=["continent"])
)

max_con_cont 

```